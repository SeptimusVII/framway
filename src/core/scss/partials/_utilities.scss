/*-----------------------------------------------------------------------------------------------------------------------------*/
/* UTILITY CLASSES */
.no-events{pointer-events: none;}
.no-transition{transition: none !important;}
.overflow-hidden{overflow:hidden;}
.overflow-visible{overflow:visible;}
.overflow-auto{overflow:auto;}
html.no-scroll{ height: 100vh; overflow: hidden;
  body{overflow-x: hidden; overflow-y: scroll;}
}

.hidden,
.invisible{display: none !important;}

.ellipsis{@include ellipsis();}

.lcnm{@include lastChildNoMargin();}

.center-block{margin-left: auto; margin-right: auto; display: block;}
.center{margin-left: auto; margin-right: auto; width: fit-content;
  &:is(%btn){display: block;}
}
.center-y{margin-top: auto;margin-bottom: auto;
  &:is(%btn){display: block;}
}
@each $key, $value in $breakpoints{
  .center-#{$key}{
    @include media-max($key){
      margin-left: auto; margin-right: auto; width: fit-content;
      &:is(%btn){display: block;}
    }
  }
  .center-y-#{$key}{
    @include media-max($key){
      margin-top: auto;margin-bottom: auto;
      &:is(%btn){display: block;}
    }
  }
}

.fl-left, .float-left{float: left;}
.fl-right, .float-right{float: right;}

.clear{clear:both;}
.clear-left{clear: left;}
.clear-right{clear: right;}
.clear-after{&:after{content: ""; display: block; width: 100%; height: 0px; clear: both;}}
.clear-before:before{content: ""; display: block; width: 100%; height: 0px; clear: both;}
.clear-no{clear:none;}

.text-right, .txt-right{text-align: right;}
.text-left, .txt-left{text-align: left;}
.text-center, .txt-center{text-align: center;}

$pbreak-width: 20ch;
.pbreak{
  &:before {
    content: "";
    width: $pbreak-width;
    max-width: 100%;
    display: block;
    overflow: hidden;
  }
}
.no-pbreak{
  p:before,
  &:before{content: none;}
}
p{@extend .pbreak;}

.pos-relative{position: relative;}

/*-----------------------------------------------------------------------------------------------------------------------------*/
// WIDTH
@mixin w-full(){
  width: 100vw; position: relative; left: 50%; transform: translateX(-50%);
}

.force-full,
.w-full{@include w-full();}
.w-fit{width: fit-content;}
.w-auto{width: auto;}
.w-100vw{width: 100vw;}

.w-100{width: 100%;}
.w-75{width: 75%;}
.w-66{width: 66%;}
.w-50{width: 50%;}
.w-33{width: 33%;}
.w-25{width: 25%;}
.w-15{width: 15%;}

@each $key, $value in $breakpoints{
  .w-#{$key}-100vw{width: 100vw;}
  .w-#{$key}-100{width: 100%;}
  .w-#{$key}-auto{width: auto;}
}

.h-100{height: 100%;}
.h-min-100vh{min-height: 100vh;}

/*-----------------------------------------------------------------------------------------------------------------------------*/
// RADIUS
.rad,.rad-all{border-radius: $radius}
.rad-top-left{border-top-left-radius: $radius; }
.rad-top-right{border-top-right-radius: $radius; }
.rad-bottom-left{border-bottom-left-radius: $radius; }
.rad-bottom-right{border-bottom-right-radius: $radius; }

.rad-top{@extend .rad-top-left,.rad-top-right;}
.rad-bottom{@extend .rad-bottom-left,.rad-bottom-right;}

.rad-left{@extend .rad-top-left,.rad-bottom-left;}
.rad-right{@extend .rad-top-right,.rad-bottom-right;}

[class*='rounded-']{overflow: hidden;}
.rounded{border-radius: $radius; overflow: hidden;}
.rounded-top{border-top-left-radius: $radius;border-top-right-radius: $radius;}
.rounded-bottom{border-bottom-left-radius: $radius;border-bottom-right-radius: $radius;}
.rounded-left{border-top-left-radius: $radius;border-bottom-left-radius: $radius;}
.rounded-right{border-top-right-radius: $radius;border-bottom-right-radius: $radius;}
.rounded-circle{border-radius: 50%;}
.rounded-pill{border-radius: 50rem;}
.rounded-0{border-radius: 0;}


/*-----------------------------------------------------------------------------------------------------------------------------*/
// SEPARATORS
.sep{ display:inline-block; width: 100%; margin: $spacing 0 $spacing; clear: both;  height: $border-default-size; background: $border-default-color; }


@each $key, $value in $colors{
  .sep-#{$key}{@extend .sep; background: $value;}
}
.sep-top:before,
.sep-bottom:after,
.sep-left:before,
.sep-right:after{content:""; @extend .sep;}

.sep-left:before{ content:""; @extend .sep; width: auto; @include flex-grow(1); margin-top: 0; margin-bottom: 0; margin-right: $spacing; }
.sep-right:after{ content:""; @extend .sep; width: auto; @include flex-grow(1); margin-top: 0; margin-bottom: 0; margin-left: $spacing; }

@each $side in $sides {
  @if $side != 'all' {
    @each $key, $value in $colors{
      .sep-#{$side}-#{$key}{
        @extend .sep-#{$side};
        @if $side == 'top' or $side == 'left'{
          &:before{background: $value;}
        }
        @if $side == 'bottom' or $side == 'right'{
          &:after{background: $value;}
        }
      }
    }
  }
}

hr{@extend .sep; border:0; }

/*-----------------------------------------------------------------------------------------------------------------------------*/
// OPACITY

@for $index from 0 through 9{
  .opa-#{$index}{opacity: #{"."+$index} !important;}
}

/*-----------------------------------------------------------------------------------------------------------------------------*/
// HIDDENS
@each $key, $value in $breakpoints{
  .hidden-#{$key}{@include media-max($key){display: none !important;}}
  .visible-#{$key}{@include media-max($key){display: block !important;}}
}