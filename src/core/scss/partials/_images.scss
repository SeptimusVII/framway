/*-----------------------------------------------------------------------------------------------------------------------------*/
/* IMAGES EFFECTS */
img{ max-width: 100%; height: auto;
  .zoomin &, &.zoomin,
  .zoomout &, &.zoomout,
  .fadetogrey &, &.fadetogrey,
  .fadetocolor &, &.fadetocolor
  {transition: all 0.6s; outline: 1px solid transparent;}

  .zoomin &,
  &.zoomin{transform: scale3d(1,1,1);}
  .zoomin:hover &,
  &.zoomin:hover{transform: scale3d(1.2,1.2,1.2);}

  .zoomout &,
  &.zoomout{transform: scale3d(1.2,1.2,1.2);}
  .zoomout:hover &,
  &.zoomout:hover{transform: scale3d(1,1,1);}

  .fadetocolor &,
  &.fadetocolor{filter: grayscale(100%);}
  .fadetocolor:hover &,
  &.fadetocolor:hover{filter: grayscale(0%);}

  .fadetogrey &,
  &.fadetogrey {filter: grayscale(0%);}
  .fadetogrey:hover &,
  &.fadetogrey:hover {filter: grayscale(100%);}

  .grayscale &,
  &.grayscale{filter: grayscale(100%);}
}

$ratios : (
  '16-9': 56.25,
  '2-1' : 50,
  '1-1' : 100,
  '1-2' : 200,
  '4-3' : 75,
);

@mixin img-container--old(){
  width: 100%;position: relative; overflow: hidden; flex-grow: 1; max-width: 100%;
  & iframe{position: absolute; height: 100%; width: 100%; margin: 0;}
  & img{height: 100%; width: 100%; object-fit: cover; pointer-events: none; }
  &.fit--cover img     ,.fit--cover & img   {object-fit: cover;}
  &.fit--contain img   ,.fit--contain & img   {object-fit: contain;}
  &.fit--unset img     ,.fit--unset & img     {object-fit: unset;}
  &.fit--none img      ,.fit--none & img      {object-fit: none;}
  &.fit--scaledown img ,.fit--scaledown & img {object-fit: scale-down;}
  &[class*="r_"],
  *[class*="r_"] &{
    &:before{content: ""; width: 1px; margin-left: -1px; float: left; height: 0; padding-top: 100%;}
    &:after {content: ""; display: table; clear: both;}
    & img{width: 100%; height: 100%;position: absolute; left: 0; top: 0;}
  }
  @each $side_1 in $sides {
    @if $side_1 == 'left' or $side_1 == 'right' {
      &[class*="r_"].img--#{$side_1} img,
      *[class*="r_"].img--#{$side_1} & img{ object-position:#{$side_1}; }
      @each $side_2 in $sides {
        @if $side_2 == 'top' or $side_2 == 'bottom' {
          &[class*="r_"].img--#{$side_2} img,
          *[class*="r_"].img--#{$side_2} & img{ object-position:#{$side_2}; }
          &[class*="r_"].img--#{$side_1}.img--#{$side_2} img,
          *[class*="r_"].img--#{$side_1}.img--#{$side_2} & img{ object-position:#{$side_1+' '+$side_2}; }
        }
      }
    }
  }
  @each $key, $value in $ratios {
    .r_#{$key} &:before,&.r_#{$key}:before{padding-top: #{$value+'%'};}
  }
  &.rounded-circle{
    &:before{padding-top: 100%;}
    img{border-radius: 50%; aspect-ratio: 1/1;}
  }
}


@mixin img-container($fit: scale-down,$bg: body(block-background)){ 
  display: block;position: relative;overflow: hidden; max-width: 100%; background: $bg;
  img{height: 100%;width: 100%;object-fit: $fit;}
  iframe{height: 100%;}
  
  &.no-bg{background: none;}
  &.rounded-circle{
    &:is(img),
    img{border-radius: 50%; aspect-ratio: 1/1;}
  }

  @each $key, $value in $ratios {
    &.r_#{$key},
    .r_#{$key} &:where(:not([class*=r_])){
      aspect-ratio: #{str-slice($key,1,str-index($key,"-")-1) + "/" + str-slice($key,str-index($key,"-")+1) }; 
    }
  }
  &:where(img){object-fit: $fit;
    &:not([class*="w-"]){width: fit-content;}
  }
  

  .fit--cover &     {&:where(img), img{object-fit: cover;}}
  .fit--contain &   {&:where(img), img{object-fit: contain;}}
  .fit--unset &     {&:where(img), img{object-fit: unset;}}
  .fit--none &      {&:where(img), img{object-fit: none;}}
  .fit--scaledown & {&:where(img), img{object-fit: scale-down;}}
  
  &.fit--cover     {&:where(img), img{object-fit: cover;}}
  &.fit--contain   {&:where(img), img{object-fit: contain;}}
  &.fit--unset     {&:where(img), img{object-fit: unset;}}
  &.fit--none      {&:where(img), img{object-fit: none;}}
  &.fit--scaledown {&:where(img), img{object-fit: scale-down;}}


  @each $side_1 in $sides {
    @if $side_1 == 'left' or $side_1 == 'right' {
      // class on parent
      .img--#{$side_1} &:not([class*="img--"]){
        &:where(img), img{object-position:#{$side_1};}
      }
      @each $side_2 in $sides {
        @if $side_2 == 'top' or $side_2 == 'bottom' {
          .img--#{$side_2} &:not([class*="img--"]){
            &:where(img), img{object-position:#{$side_2};}
          }
          .img--#{$side_1}.img--#{$side_2} &:not([class*="img--"]){
            &:where(img), img{object-position:#{$side_1+' '+$side_2};}
          }
        }
      }

      // class on element
      &.img--#{$side_1} {
        &:where(img), img{object-position:#{$side_1};}
      }
      @each $side_2 in $sides {
        @if $side_2 == 'top' or $side_2 == 'bottom' {
          &.img--#{$side_2} {
            &:where(img), img{object-position:#{$side_2};}
          }
          &.img--#{$side_1}.img--#{$side_2} {
            &:where(img), img{object-position:#{$side_1+' '+$side_2};}
          }
        }
      }
    }
  }
}

%img-container{@include img-container();}
.img-container{@include img-container();}
img[class*=r_]{@include img-container();}

@each $key, $value in $ratios {
  .aspect_#{$key}{aspect-ratio: #{str-slice($key,1,str-index($key,"-")-1) + "/" + str-slice($key,str-index($key,"-")+1) };}
}

// for later, when attr() will be a real thing
// background-image: url(attr(src url, ""));

/* IMAGES STYLING */
img.fl-left,
// .fl-left>img:first-child:last-child{margin-right: $spacing;}
.fl-left>img:first-child:last-child{margin: 0 body(line-height)*1em 0.5em 0;}
img.fl-right,
// .fl-right>img:first-child:last-child{margin-left: $spacing;}
.fl-right>img:first-child:last-child{margin: 0 0 0.5em body(line-height)*1em;}