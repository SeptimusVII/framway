$griditem-minwidth: 35ch !default;
:root{
    --griditem-minwidth: #{$griditem-minwidth};
}

@mixin grid(){
  display: grid; gap: $spacing;
}

@mixin grid-min-max-cols($min-cols, $max-cols, $cols-min-width, $grid-row-gap: 0px, $grid-column-gap: 0px) {
  --min-cols: #{$min-cols};
  --max-cols: #{$max-cols};
  --cols-min-width: #{$cols-min-width};
  --grid-row-gap: #{$grid-row-gap};
  --grid-column-gap: #{$grid-column-gap};
  
  display: grid;
  grid-template-columns: Repeat(auto-fill, Minmax(Min(calc(100%/var(--min-cols) - var(--grid-column-gap)*(var(--min-cols) - 1)/var(--min-cols)), Max(var(--cols-min-width), calc(100%/var(--max-cols) - var(--grid-column-gap)*(var(--max-cols) - 1)/var(--max-cols)))), 1fr));
  gap: var(--grid-row-gap) var(--grid-column-gap);
}

.d-grid{@include grid();
  &[class*=flex]{display: flex !important;}
  @for $index from 1 through 12{
    &.cols-#{$index}{grid-template-columns: #{repeat('1fr ',$index)}; grid-template-columns: #{repeat('minmax(0,1fr) ',$index)};}
    &.rows-#{$index}{grid-template-rows: #{repeat('1fr ',$index)}; grid-template-rows: #{repeat('minmax(0,1fr) ',$index)};}
  }
  @each $key, $value in $breakpoints{
    @include media-max($key){
      @for $index from 1 through 12{
        &.cols-#{$key}-#{$index}{grid-template-columns: #{repeat('1fr ',$index)}; grid-template-columns: #{repeat('minmax(0,1fr) ',$index)};}
        &.rows-#{$key}-#{$index}{grid-template-rows: #{repeat('1fr ',$index)}; grid-template-rows: #{repeat('minmax(0,1fr) ',$index)};}
      }
    }
  }
  &>*{ 
    &:not([class*=m-bottom]){margin-bottom: 0;}
    @include lastChildNoMargin();
  }
  &>div:empty{display: none;}
  &.flow{grid-auto-flow: dense;}
  &.auto-rows{grid-auto-rows: 1fr;}
  &.cols-autofit{
    grid-template-columns: Repeat(auto-fit, minmax($griditem-minwidth, 1fr));
    grid-template-columns: Repeat(auto-fit, minmax(var(--griditem-minwidth), 1fr));
    @media (max-width: 45ch) {
      grid-template-columns: Repeat(auto-fit, minmax(100%, 1fr));
    }
  }
  &.cols-autofill{
    grid-template-columns: Repeat(auto-fill, minmax($griditem-minwidth, 1fr));
    grid-template-columns: Repeat(auto-fill, minmax(var(--griditem-minwidth), 1fr));
  }
  &.cols-autofit,
  &.cols-autofill{
    &>*{min-width: var(--griditem-minwidth); }
  }
}
@for $index from 1 through 12{
  .cols-span-#{$index}{grid-column: span $index;}
  .rows-span-#{$index}{grid-row: span $index;}
  .cols-start-#{$index}{grid-column-start: $index;}
  .cols-end-#{$index}{grid-column-end: $index+1;}
  @each $key, $value in $breakpoints{
    @include media-max($key){
      @for $index from 1 through 12{
        .cols-span-#{$key}-#{$index}{grid-column: span $index;}
        .cols-span-#{$key}-all{grid-column: 1/-1;}
        .rows-span-#{$key}-#{$index}{grid-row: span $index;}
      }
    }
  }
}
.cols-span-all{grid-column: 1/-1;}
.cols-end-end{grid-column-end: -1;}

@for $index from 0 through 6{
  .gap-#{$index}{gap: $spacing*$index;}
  .gap-#{$index}-em{gap: 1em*$index ;}
  .gap-#{$index}-rem{gap: 1rem*$index ;}
}

// GRID ORDERS
@for $index from 0 through 12{
  .cols-order-#{$index}{order: $index;}
  @each $key, $value in $breakpoints{
    .cols-order-#{$key}-#{$index}{
      @include media-max(#{$key}){
        order: $index;
      }
    }
  }
}

